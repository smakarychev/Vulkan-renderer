/* Generated from shaders */

#pragma once

#include "{{base_template_name}}"

struct {{name}}ShaderBindGroup : ShaderBindGroupBase<{{name}}ShaderBindGroup>
{
    using ShaderBindGroupBase::ShaderBindGroupBase;
    void Bind(RenderCommandList& cmdList, const DescriptorArenaAllocators& allocators)
    {
{% if is_raster %}
        cmdList.BindPipelineGraphics({.Pipeline = Shader->Pipeline()});
    {% if has_immutable_sampler %}
        cmdList.BindImmutableSamplersGraphics({.PipelineLayout = Shader->GetLayout(), .Set = (u32){{ descriptors_kind_string(0) }}});
    {% else if has_samplers %}
        cmdList.BindDescriptorsGraphics({.Descriptors = Shader->Descriptors({{ descriptors_kind_string(0) }}), .Allocators = &allocators, .PipelineLayout = Shader->GetLayout(), .Set = (u32){{ descriptors_kind_string(0) }}});
    {% endif %}
    {% if has_resources %}
        cmdList.BindDescriptorsGraphics({.Descriptors = Shader->Descriptors({{ descriptors_kind_string(1) }}), .Allocators = &allocators, .PipelineLayout = Shader->GetLayout(), .Set = (u32){{ descriptors_kind_string(1) }}});
    {% endif %}
    {% if has_materials %}
        cmdList.BindDescriptorsGraphics({.Descriptors = Shader->Descriptors({{ descriptors_kind_string(2) }}), .Allocators = &allocators, .PipelineLayout = Shader->GetLayout(), .Set = (u32){{ descriptors_kind_string(2) }}});
    {% endif %}
{% else %}
        cmdList.BindPipelineCompute({.Pipeline = Shader->Pipeline()});
    {% if has_immutable_sampler %}
        cmdList.BindImmutableSamplersCompute({.PipelineLayout = Shader->GetLayout(), .Set = (u32){{ descriptors_kind_string(0) }}});
    {% else if has_samplers %}
        cmdList.BindDescriptorsCompute({.Descriptors = Shader->Descriptors({{ descriptors_kind_string(0) }}), .Allocators = &allocators, .PipelineLayout = Shader->GetLayout(), .Set = (u32){{ descriptors_kind_string(0) }}});
    {% endif %}
    {% if has_resources %}
        cmdList.BindDescriptorsCompute({.Descriptors = Shader->Descriptors({{ descriptors_kind_string(1) }}), .Allocators = &allocators, .PipelineLayout = Shader->GetLayout(), .Set = (u32){{ descriptors_kind_string(1) }}});
    {% endif %}
    {% if has_materials %}
        cmdList.BindDescriptorsCompute({.Descriptors = Shader->Descriptors({{ descriptors_kind_string(2) }}), .Allocators = &allocators, .PipelineLayout = Shader->GetLayout(), .Set = (u32){{ descriptors_kind_string(2) }}});
    {% endif %}
{% endif %}
    }
{% for binding in bindings %}
    {% if binding.set == 0 %}
    void Set{{binding.name}}(Sampler sampler) const
    {
        Device::UpdateDescriptors(Shader->Descriptors({{ descriptors_kind_string(binding.set) }}),
            DescriptorBindingInfo{.Slot = {{binding.binding}}, .Type = {{ descriptor_type_string(binding.descriptor) }}}, sampler);
    }
    {% else %}
    void Set{{binding.name}}(const {% if is_descriptor_a_buffer(binding.descriptor) %}BufferSubresource& binding{% else %}ImageSubresource& binding, ImageLayout layout{% endif %}{% if binding.count > 1 or binding.is_bindless %}, u32 index{% endif %}) const
    {
        Device::UpdateDescriptors(Shader->Descriptors({{ descriptors_kind_string(binding.set) }}),
            DescriptorBindingInfo{.Slot = {{binding.binding}}, .Type = {{ descriptor_type_string(binding.descriptor) }}}, binding{% if not is_descriptor_a_buffer(binding.descriptor) %}, layout{% endif %}, {% if binding.count > 1 or binding.is_bindless %}index{% else %}0{% endif %});
    }
    {% endif %}
    {% if binding.set == 2 %}
    void Set{{binding.name}}Globally(const {% if is_descriptor_a_buffer(binding.descriptor) %}BufferSubresource& binding{% else %}ImageSubresource& binding, ImageLayout layout{% endif %}{% if binding.count > 1 or binding.is_bindless %}, u32 index{% endif %}) const
    {
        Device::UpdateGlobalDescriptors(Shader->Descriptors({{ descriptors_kind_string(binding.set) }}),
            DescriptorBindingInfo{.Slot = {{binding.binding}}, .Type = {{ descriptor_type_string(binding.descriptor) }}}, binding{% if not is_descriptor_a_buffer(binding.descriptor) %}, layout{% endif %}, {% if binding.count > 1 or binding.is_bindless %}index{% else %}0{% endif %});
    }
    {% endif %}
{% endfor %}
};

