#version 460

layout(local_size_x = 32, local_size_y = 32) in;

layout(binding = 0, r32f) uniform writeonly image2D u_out_image;
layout(binding = 1) uniform sampler2D u_in_image;

layout(binding = 2) uniform projection_data
{
    mat4 last_view_inv;
    mat4 last_projection_inv;
    mat4 current_view;
    mat4 current_projection;
} u_projection_data;

layout(push_constant) uniform push_constants
{
    uvec2 texture_size;
};

void main()
{
    vec2 uv = vec2(gl_GlobalInvocationID.xy) + vec2(0.5f);
    uv /= texture_size;
    float depth = texture(u_in_image, uv).r;
    
    vec3 ndc = vec3(uv * 2.0f - vec2(1.0f), depth);
    vec4 unprojected = u_projection_data.last_view_inv * u_projection_data.last_projection_inv * vec4(ndc, 1.0f);
    unprojected.xzy /= unprojected.w;
    
    vec4 reprojected = u_projection_data.current_projection * u_projection_data.current_view * vec4(unprojected.xyz, 1.0f);
    reprojected.xzy /= reprojected.w;

    uv = (reprojected.xy + vec2(1.0f)) * 0.5f;
    uv.x = max(0.0, min(uv.x, 1.0));
    uv.y = max(0.0, min(uv.y, 1.0));
    uv *= texture_size;
    depth = reprojected.z;
    
    imageStore(u_out_image, ivec2(uv), vec4(depth, 0, 0, 0));
}