#include "../common.shader_header"

const uint TRIANGLE_BITS = 8;
const uint TRIANGLE_MASK = (1 << 8) - 1;

struct VisibilityInfo {
    uint instance_id;
    uint triangle_id;
};

uint pack_visibility(VisibilityInfo visibility_info) {
    return (visibility_info.instance_id << TRIANGLE_BITS) | visibility_info.triangle_id;
}

VisibilityInfo unpack_visibility(uint packed) {
    VisibilityInfo visibilityInfo;
    visibilityInfo.triangle_id = packed & TRIANGLE_MASK;
    visibilityInfo.instance_id = packed >> TRIANGLE_BITS;
    return visibilityInfo;
}

struct Normal {
    float x;
    float y; 
    float z;
};

struct Tangent {
    float x;
    float y; 
    float z;
};

struct UV {
    float u;
    float v;
};

struct Material {
    vec4 albedo_color;
    float metallic;
    float roughness;
    float pad0;
    float pad1;
    uint albedo_texture_index;
    uint normal_texture_index;
    uint metallic_roughness_texture_index;
    uint ambient_occlusion_texture_index;
};