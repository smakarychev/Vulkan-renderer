// ported from https://github.com/TheRealMJP/Shadows

#version 460

#include "../../shadow.glsl"
#include "../scene/visibility/common.glsl"

#extension GL_EXT_scalar_block_layout: require
#extension GL_EXT_control_flow_attributes: require

layout(local_size_x = MAX_CASCADES) in;

// todo: fix me (I am probably a uint, not a float)
layout(set = 1, binding = 0) buffer min_max {
    float min;
    float max;
} u_min_max;

layout(scalar, set = 1, binding = 1) writeonly buffer csm_data {
    CSMData csm_data;
} u_csm_data;

layout(set = 1, binding = 2) uniform view_info {
    ViewInfo view;
} u_view_info;

layout(push_constant) uniform push_constants {
    uint u_shadow_size;
    uint u_cascade_count;
    vec3 u_light_direction;
};

mat4 ortho(float l, float b, float r, float t, float n, float f) {
    mat4 result = mat4(1.0f);
    result[0][0] = 2.0f / (r - l);
    result[1][1] = 2.0f / (t - b);
    result[2][2] = 1.0f / (f - n); // swaped n and f because of revese z
    result[3][0] = (r + l) / (l - r);
    result[3][0] = (t + b) / (b - t);
    result[3][2] = f / (f - n); // swaped n and f because of revese z
 
    return result;
}

mat4 inverse_rotation_translation(mat3 r, vec3 t) {
    // RInv(x) = R(x)^T, TInv(x) = T(-x)
    mat4 inv = mat4(0.0f);
    inv[0] = vec4(r[0][0], r[1][0], r[2][0], 0.0f);
    inv[1] = vec4(r[0][1], r[1][1], r[2][1], 0.0f);
    inv[2] = vec4(r[0][2], r[1][2], r[2][2], 0.0f);
    inv[3] = vec4(0.0f, 0.0f, 0.0f, 1.0f);
    inv[3][0] = -dot(r[0], t);
    inv[3][1] = -dot(r[1], t);
    inv[3][2] = -dot(r[2], t);
    
    return inv;
}

void main() {
    if (gl_GlobalInvocationID.x >= u_cascade_count)
        return;
    
    float cascades[MAX_CASCADES];
    const float f = u_view_info.view.far;
    const float n = u_view_info.view.near;
    const float range_max = f - n;
    const float min_z = n + u_min_max.min * range_max;
    const float max_z = n + u_min_max.max * range_max;
    const float ratio = max_z / min_z;
    for (uint i = 0; i < u_cascade_count; i++) {
        const float p = float(i + 1) / float(u_cascade_count);
        const float log_scale = min_z * pow(abs(ratio), p);
        cascades[i] = (log_scale - n) / range_max;
    }
    
    const uint cascade_index = gl_GlobalInvocationID.x;
    // get the 8 points of the view frustum in world space
    vec3 frustum_ws[8] =
    {
        vec3(-1.0f,  1.0f, 0.0f),
        vec3( 1.0f,  1.0f, 0.0f),
        vec3( 1.0f, -1.0f, 0.0f),
        vec3(-1.0f, -1.0f, 0.0f),
        vec3(-1.0f,  1.0f, 1.0f),
        vec3( 1.0f,  1.0f, 1.0f),
        vec3( 1.0f, -1.0f, 1.0f),
        vec3(-1.0f, -1.0f, 1.0f),
    };

    const float prev_cascade = cascade_index == 0 ? u_min_max.min : cascades[cascade_index - 1];
    const float cascade = cascades[cascade_index];

    [[unroll]]
    for(uint i = 0; i < 8; i++) {
        const vec4 corner = u_view_info.view.inv_view_projection * vec4(frustum_ws[i], 1.0f);
        frustum_ws[i] = corner.xyz / corner.w;
    }
    
    
    // get the corners of the current cascade slice of the view frustum
    [[unroll]]
    for(uint i = 0; i < 4; i++) {
        const vec3 corner_ray = frustum_ws[i + 4] - frustum_ws[i];
        const vec3 corner_near = corner_ray * prev_cascade;
        const vec3 corner_far = corner_ray * cascade;
        frustum_ws[i + 4] = frustum_ws[i] * corner_far;
        frustum_ws[i] = frustum_ws[i] * corner_near;
    }
    
    // calculate the center of the view frustum slice
    vec3 center = vec3(0.0f);
    [[unroll]]
    for(uint i = 0; i < 8; ++i)
        center += frustum_ws[i];
    center /= 8.0f;
    
    // pick the up vector to use for the light camera
    const vec3 up = abs(u_light_direction.y) < 0.999f ? vec3(0.0f, 1.0f, 0.0f) : vec3(0.0f, 0.0f, 1.0f);
    
    // create a temporary view matrix for the light
    vec3 camera_pos = center;
    mat3 camera_rotation;
    camera_rotation[2] = -u_light_direction;
    camera_rotation[0] = normalize(cross(up, camera_rotation[2]));
    camera_rotation[1] = cross(camera_rotation[2], camera_rotation[0]);
    mat4 camera_view =  inverse_rotation_translation(camera_rotation, camera_pos);
    
    vec3 min_extents;
    vec3 max_extents;
    // calculate an AABB around the frustum corners
    const float float_max = 3.402823466e+38F;
    vec3 mins = vec3(float_max, float_max, float_max);
    vec3 maxes = vec3(-float_max, -float_max, -float_max);
    [[unroll]]
    for(uint i = 0; i < 8; i++) {
        const vec3 corner = vec3(u_view_info.view.view * vec4(frustum_ws[i], 1.0f));
        mins = min(mins, corner);
        maxes = max(maxes, corner);
    }

    min_extents = mins;
    max_extents = maxes;

    // adjust the min/max to accommodate the filtering size
    const float scale = (u_shadow_size + 9.0f) / float(u_shadow_size);
    min_extents.x *= scale;
    min_extents.y *= scale;
    max_extents.x *= scale;
    max_extents.y *= scale;
    
    const vec3 cascade_extents = max_extents - min_extents;
    
    // get position of the shadow camera
    const vec3 shadow_pos = center + u_light_direction * -min_extents.z;
    
    // сome up with a new orthographic camera for the shadow caster
    const mat4 shadow_view = inverse_rotation_translation(camera_rotation, shadow_pos);
    const mat4 shadow_projection = ortho(min_extents.x, min_extents.y, max_extents.x, max_extents.y,
        0.0f, cascade_extents.z);
    
    const mat4 shadow_view_projection = shadow_projection * shadow_view;

    u_csm_data.csm_data.cascades[cascade_index] = cascade;
    u_csm_data.csm_data.view_projections[cascade_index] = shadow_view_projection;
    u_csm_data.csm_data.views[cascade_index] = shadow_view;
    u_csm_data.csm_data.near[cascade_index] = 0.0f;
    u_csm_data.csm_data.far[cascade_index] = cascade_extents.z;
    
    if (cascade_index == 0) {
        u_csm_data.csm_data.cascade_count = u_cascade_count;
    }
}