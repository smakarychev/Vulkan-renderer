const float PI = 3.14159265359;

float d_ggx(float n_dot_h, float roughness) {
    float a2 = roughness * roughness;
    
    float f = (n_dot_h * a2 - n_dot_h) * n_dot_h + 1.0;
    
    return a2 / (PI * f * f);
}

float v_smith_correlated(float n_dot_v, float n_dot_l, float roughness) {
    
    return 0.5f / mix(2 * n_dot_l * n_dot_v, n_dot_l + n_dot_v, roughness);
}

vec3 fresnel_schlick(float cos_theta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cos_theta, 0.0, 1.0), 5.0);
}