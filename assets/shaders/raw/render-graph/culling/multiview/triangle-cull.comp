#version 460

#include "common.glsl"
#include "culling_functions.glsl"

#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_clustered: enable
#extension GL_EXT_scalar_block_layout: require

const uint TRIANGLES_PER_MESHLET = 256;
const uint MICRO_CLUSTER_SIZE = 4;

layout(local_size_x = 256) in;

layout(constant_id = 0) const bool REOCCLUSION = false;
layout(constant_id = 1) const bool SINGLE_PASS = false;


layout(set = 0, binding = 0) uniform sampler u_sampler;
layout(set = 1, binding = 0) uniform texture2D u_hiz[MAX_VIEWS];

layout(scalar, set = 1, binding = 1) uniform view_buffer {
    ViewData views[MAX_VIEWS];
} u_views;

layout(scalar, set = 1, binding = 2) uniform view_spans_buffer {
    ViewSpan spans[MAX_GEOMETRIES];
} u_view_spans;

layout(std430, set = 1, binding = 3) readonly buffer object_buffer {
    object_data objects[];
} u_objects[MAX_GEOMETRIES];

layout(std430, set = 1, binding = 4) buffer meshlet_visibility_buffer {
    uint8_t visibility[];
} u_meshlet_visibility[MAX_VIEWS];

layout(std430, set = 1, binding = 5) readonly buffer compacted_command_buffer {
    IndirectCommand commands[];
} u_commands[MAX_VIEWS];

layout(std430, set = 1, binding = 6) readonly buffer count_buffer {
    uint count[];
} u_count;

layout(std430, set = 1, binding = 7) writeonly buffer triangle_buffer {
    uint8_t triangles[];
} u_triangles[MAX_VIEWS];

struct TriangleVisibility
{
    int visibility[2];
};
layout(std430, set = 1, binding = 8) buffer visible_triangles_buffer {
    TriangleVisibility visibility[];
} u_triangle_visibility[MAX_VIEWS];

layout(std430, set = 1, binding = 9) readonly buffer positions_buffer {
    Position positions[];
} u_positions[MAX_GEOMETRIES];

layout(std430, set = 1, binding = 10) readonly buffer indices_buffer {
    uint8_t indices[];
} u_indices[MAX_GEOMETRIES];

layout(std430, set = 1, binding = 11) writeonly buffer singular_indices_buffer {
    uint indices[];
} u_culled_indices[MAX_VIEWS];

layout(std430, set = 1, binding = 12) writeonly buffer singular_index_count_buffer {
    uint count[];
} u_culled_count;

layout(push_constant) uniform push_constants {
    uint u_command_offset;
    uint u_max_command_index;
    uint u_geometry_index;
    uint u_view_count;
};

vec4 transform_to_NDC_and_get_aabb(inout Triangle triangle) {
    triangle.a.xyz /= triangle.a.w;
    triangle.b.xyz /= triangle.b.w;
    triangle.c.xyz /= triangle.c.w;

    const float minx = min(triangle.a.x, min(triangle.b.x, triangle.c.x));
    const float maxx = max(triangle.a.x, max(triangle.b.x, triangle.c.x));
    const float miny = min(triangle.a.y, min(triangle.b.y, triangle.c.y));
    const float maxy = max(triangle.a.y, max(triangle.b.y, triangle.c.y));

    vec4 aabb = vec4(minx, maxy, maxx, miny);
    aabb = aabb.xyzw * 0.5f + vec4(0.5f);

    return aabb;
}

bool is_visible(Triangle triangle, uint view_index) {
    bool visible = true;
    visible = visible && is_backface_triangle_visible(triangle);
    const vec4 aabb = transform_to_NDC_and_get_aabb(triangle);
    visible = visible && 
        is_screen_size_visible(aabb, u_views.views[view_index].width, u_views.views[view_index].height);
    visible = visible && 
        (is_frustum_triangle_visible(aabb) || 
        min(triangle.a.z, min(triangle.b.z, triangle.c.z)) < 0.0f);

    return visible;
}

bool is_reocclusion_visible(Triangle triangle, uint view_index) {
    bool visible = true;
    visible = visible && is_backface_triangle_visible(triangle);
    const vec4 aabb = transform_to_NDC_and_get_aabb(triangle);
    visible = visible && 
        is_screen_size_visible(aabb, u_views.views[view_index].width, u_views.views[view_index].height);
    const float depth = max(triangle.a.z, max(triangle.b.z, triangle.c.z));
    
    visible = visible &&
        ((is_frustum_triangle_visible(aabb) && 
        is_occlusion_triangle_visible(aabb, depth, u_views.views[view_index], u_sampler, u_hiz[view_index])) ||
        min(triangle.a.z, min(triangle.b.z, triangle.c.z)) < 0.0f);

    return visible;
}

void compact(uint id, uint reference_id, uint8_t triangle_index, uvec3 indices, bool should_draw, uint view_index) {
    IndirectCommand command = u_commands[reference_id].commands[id];
    
    // mark this command as processed; the REOCCLUSION and ordinary stages both process the same set of 
    // commands, so we can update it only once
    if (!REOCCLUSION) 
        flags_unset_should_triangle_cull(
            u_meshlet_visibility[view_index].visibility[command.firstInstance]);

    const uvec4 visible_ballot = subgroupBallot(should_draw);
    const uint total_visible_triangle_count = subgroupBallotBitCount(visible_ballot);
    const uint total_visible_count = total_visible_triangle_count * 3;

    uint compacted_index_offset = 0;
    if (subgroupElect()) 
        compacted_index_offset = atomicAdd(u_culled_count.count[view_index], total_visible_count);

    compacted_index_offset = subgroupBroadcastFirst(compacted_index_offset);

    if (should_draw) {
        const uint compacted_buffer_index = 
            compacted_index_offset + subgroupBallotExclusiveBitCount(visible_ballot) * 3;
        u_culled_indices[view_index].indices[compacted_buffer_index + 0] = (command.firstInstance << 8) | indices.x;
        u_culled_indices[view_index].indices[compacted_buffer_index + 1] = (command.firstInstance << 8) | indices.y;
        u_culled_indices[view_index].indices[compacted_buffer_index + 2] = (command.firstInstance << 8) | indices.z;

        u_triangles[view_index].triangles[compacted_buffer_index / 3] = triangle_index;
    }
}

void main() {
    uint id = gl_GlobalInvocationID.x / gl_WorkGroupSize.x;
    // todo: remove reference_id at all
    const uint reference_id = u_geometry_index; 
    if (id >= u_max_command_index || id + u_command_offset >= u_count.count[reference_id])
        return;
    id = id + u_command_offset;

    const IndirectCommand command = u_commands[reference_id].commands[id];

    const uint triangle_index = gl_LocalInvocationID.x;
    const uint index_offset = triangle_index * 3;

    if (index_offset >= command.indexCount)
        return;

    const object_data object = u_objects[u_geometry_index].objects[command.render_object];

    const uvec3 indices = uvec3(
        u_indices[u_geometry_index].indices[command.firstIndex + index_offset + 0],
        u_indices[u_geometry_index].indices[command.firstIndex + index_offset + 1],
        u_indices[u_geometry_index].indices[command.firstIndex + index_offset + 2]);

    // get triangle position in world coordinates (common for all views)
    const Triangle triangle = Triangle(
        object.model * vec4_from_position(u_positions[u_geometry_index].positions[command.vertexOffset + uint(indices.x)]),
        object.model * vec4_from_position(u_positions[u_geometry_index].positions[command.vertexOffset + uint(indices.y)]),
        object.model * vec4_from_position(u_positions[u_geometry_index].positions[command.vertexOffset + uint(indices.z)]));

    const uint meshlet_index = command.firstInstance;
    const uint bitslot = triangle_index / MICRO_CLUSTER_SIZE;

    const uint index_major = uint(bitslot > 31);
    const uint index_minor = bitslot & 31u;

    const uint first_view = u_view_spans.spans[u_geometry_index].first;
    const uint view_count = u_view_spans.spans[u_geometry_index].count;

    for (uint i = first_view; i < first_view + view_count; i++) {
        // first of all, check that meshlet is actually visible from this view
        const bool is_meshlet_visible = flags_visible(u_meshlet_visibility[i].visibility[meshlet_index]);
        if (!is_meshlet_visible)
            continue;
        
        const bool is_meshlet_drawn = flags_should_draw(u_meshlet_visibility[i].visibility[meshlet_index]);
        
        const ViewData view = u_views.views[i];
        
        const Triangle triangle_view = Triangle(
            view.view_projection_matrix * triangle.a,
            view.view_projection_matrix * triangle.b,
            view.view_projection_matrix * triangle.c);

        const TriangleVisibility visibility = u_triangle_visibility[i].visibility[meshlet_index];
        bool is_last_frame_visible = (visibility.visibility[index_major] & (1 << index_minor)) != 0;
        bool should_be_drawn = false;
        bool visible = false;

        if (SINGLE_PASS) {
            // this is for order-independent translucency rendering
            visible = is_meshlet_drawn && is_reocclusion_visible(triangle_view, i);
            should_be_drawn = visible;
        }
        else if (!REOCCLUSION) {
            visible = is_meshlet_drawn && is_last_frame_visible && is_visible(triangle_view, i);
            should_be_drawn = visible;
        } else {
            visible = is_meshlet_visible && is_reocclusion_visible(triangle_view, i);
            bool has_visible = subgroupClusteredOr(visible, MICRO_CLUSTER_SIZE);
            if ((triangle_index & MICRO_CLUSTER_SIZE - 1) == 0)
            {
                if (has_visible)
                    atomicOr(
                        u_triangle_visibility[i].visibility[meshlet_index].visibility[index_major], (1 << bitslot));
                else
                    atomicAnd(
                        u_triangle_visibility[i].visibility[meshlet_index].visibility[index_major], ~(1 << bitslot));
            }

            should_be_drawn = !is_last_frame_visible && visible;
        }
        compact(id, reference_id, uint8_t(triangle_index), indices, should_be_drawn, i);
    }
}
