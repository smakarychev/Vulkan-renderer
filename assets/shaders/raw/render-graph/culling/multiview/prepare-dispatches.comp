#version 460

layout(local_size_x = 64) in;

#include "common.glsl"

layout(std430, set = 1, binding = 0) readonly buffer command_count_buffer {
    uint count[];
} u_command_counts;

layout(std430, set = 1, binding = 1) writeonly buffer dispatch_buffer {
    VkDispatchIndirectCommand commands[];
} u_dispatches[MAX_GEOMETRIES];

layout(push_constant) uniform push_constants {
    uint u_commands_per_batch_count;
    uint u_commands_multiplier;
    uint u_local_group_x;
    uint u_geometry_count;
    uint u_meshlet_view_count;
    uint u_max_dispatches;
};

void main() {
    uint dispatch_id = gl_GlobalInvocationID.x;
    if (dispatch_id >= u_max_dispatches)
        return;

    for (uint i = 0; i < u_geometry_count; i++) {
        uint combined_count_index = i + u_meshlet_view_count;
        uint command_offset = gl_GlobalInvocationID.x * u_commands_per_batch_count;
        uint total_count = u_command_counts.count[combined_count_index];

        if (command_offset >= total_count) {
            VkDispatchIndirectCommand command;
            command.x = command.y = command.z = 0;
            u_dispatches[i].commands[dispatch_id] = command;
        }
        else {
            uint real_count = min(u_commands_per_batch_count, total_count - command_offset);
            real_count = (real_count * u_commands_multiplier + u_local_group_x - 1) / u_local_group_x;

            VkDispatchIndirectCommand command;
            command.y = command.z = 1;
            command.x = real_count;
            u_dispatches[i].commands[dispatch_id] = command;
        }
    }
}