#version 460

#include "common.glsl"
#include "culling_functions.glsl"

#extension GL_KHR_shader_subgroup_ballot: enable

layout(local_size_x = 64) in;

layout(constant_id = 0) const bool REOCCLUSION = false;
layout(constant_id = 1) const bool SINGLE_PASS = false;


layout(set = 0, binding = 0) uniform sampler u_sampler;
layout(set = 1, binding = 0) uniform texture2D u_hiz;

layout(set = 1, binding = 1) uniform scene_data_buffer {
    scene_data scene;
} u_scene_data;

layout(std430, set = 1, binding = 2) readonly buffer object_buffer {
    object_data objects[];
} u_objects;

layout(std430, set = 1, binding = 3) readonly buffer object_visibility_buffer{
    uint16_t visibility[];
} u_object_visibility;

layout(std430, set = 1, binding = 4) buffer meshlet_buffer {
    Meshlet meshlets[];
} u_meshlets;

layout(std430, set = 1, binding = 5) buffer meshlet_visibility_buffer{
    uint16_t visibility[];
} u_meshlet_visibility;

layout(std430, set = 1, binding = 6) readonly buffer command_buffer {
    IndirectCommand commands[];
} u_commands;

layout(std430, set = 1, binding = 7) writeonly buffer compacted_command_buffer {
    IndirectCommand commands[];
} u_compacted_commands;

layout(std430, set = 1, binding = 8) buffer count_buffer {
    uint count;
} u_count;

layout(push_constant) uniform push_constants {
    uint meshlets_count;
};

bool is_visible(vec3 origin, float radius, vec3 cone_axis, float cone_cutoff) {
    bool visible = true;
    visible = visible && is_backface_meshlet_visible(origin, radius, cone_axis, cone_cutoff);
    visible = visible && is_frustum_visible(origin, radius, u_scene_data.scene);

    return visible;
}

bool is_reocclusion_visible(vec3 origin, float radius, vec3 cone_axis, float cone_cutoff) {
    bool visible = true;
    visible = visible && is_backface_meshlet_visible(origin, radius, cone_axis, cone_cutoff);
    visible = visible && is_frustum_visible(origin, radius, u_scene_data.scene);
    visible = visible && is_occlusion_visible(origin, radius, u_scene_data.scene, u_sampler, u_hiz);

    return visible;
}

void compact(uint id, bool should_draw) {
    IndirectCommand command = u_commands.commands[id];

    uvec4 is_visible_ballot = subgroupBallot(should_draw);

    uint total_visible_count = subgroupBallotBitCount(is_visible_ballot);

    uint compacted_buffer_index_base;
    if (subgroupElect())
        compacted_buffer_index_base = atomicAdd(u_count.count, total_visible_count);
    compacted_buffer_index_base = subgroupBroadcastFirst(compacted_buffer_index_base);

    uint compacted_buffer_offset = subgroupBallotExclusiveBitCount(is_visible_ballot);

    uint compacted_buffer_index = compacted_buffer_index_base + compacted_buffer_offset;

    if (should_draw)
        u_compacted_commands.commands[compacted_buffer_index] = command;
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= meshlets_count)
        return;

    uint meshlet_id = u_commands.commands[id].firstInstance;
    Meshlet meshlet = u_meshlets.meshlets[meshlet_id];
    object_data object = u_objects.objects[u_commands.commands[id].render_object];

    vec3 origin = vec3(u_scene_data.scene.view_matrix * object.model * vec4(meshlet.x, meshlet.y, meshlet.z, 1.0f));
    float scale = extract_scale(object.model);
    float radius = meshlet.r * scale;

    vec3 cone_axis = vec3(meshlet.cone_x, meshlet.cone_y, meshlet.cone_z) / 127.0f;
    cone_axis = vec3(u_scene_data.scene.view_matrix * object.model * vec4(cone_axis, 0.0f)) / scale;
    float cone_cutoff = float(meshlet.cone_cutoff) / 127.0f;

    bool is_mesh_drawn = flags_should_draw(u_object_visibility.visibility[u_commands.commands[id].render_object]);
    bool is_mesh_visible = flags_visible(u_object_visibility.visibility[u_commands.commands[id].render_object]);
    bool is_last_frame_visible = flags_visible(u_meshlet_visibility.visibility[meshlet_id]);
    bool should_be_drawn = false;
    bool visible = false;
    if (SINGLE_PASS) {
        // this is for order-independent translucency rendering
        visible = is_mesh_drawn && is_reocclusion_visible(origin, radius, cone_axis, cone_cutoff);
        should_be_drawn = visible;
    }
    else if (!REOCCLUSION) {
        visible = is_mesh_drawn && is_last_frame_visible && is_visible(origin, radius, cone_axis, cone_cutoff);
        should_be_drawn = visible;
    } else {
        visible = is_mesh_visible && is_reocclusion_visible(origin, radius, cone_axis, cone_cutoff);

        if (visible)
            flags_set_visible(u_meshlet_visibility.visibility[meshlet_id]);
        else
            flags_unset_visible(u_meshlet_visibility.visibility[meshlet_id]);

        should_be_drawn = !is_last_frame_visible && visible;
    }

    if (should_be_drawn)
        set_flags_set_should_draw(u_meshlet_visibility.visibility[meshlet_id]);
    else
        set_flags_unset_should_draw(u_meshlet_visibility.visibility[meshlet_id]);

    compact(id, should_be_drawn);
}
