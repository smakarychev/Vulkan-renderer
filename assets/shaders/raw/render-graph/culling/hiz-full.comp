#version 460

layout(set = 0, binding = 0) uniform sampler u_min_sampler;
layout(set = 0, binding = 1) uniform sampler u_max_sampler;

layout(set = 1, binding = 0) uniform texture2D u_min_image;
layout(set = 1, binding = 1) uniform texture2D u_max_image;
layout(set = 1, binding = 2, r32f) uniform writeonly image2D u_output_min[16];
layout(set = 1, binding = 3, r32f) uniform writeonly image2D u_output_max[16];

#define NVPRO_PYRAMID_TYPE vec2

void store(in ivec2 coord, in int level, in vec2 in_) {
    imageStore(u_output_min[level], coord, vec4(in_.x));
    imageStore(u_output_max[level], coord, vec4(in_.y));
}
#define NVPRO_PYRAMID_STORE(coord, level, in_) store(coord, level, in_)

ivec2 levelSize(int level) { return imageSize(u_output_min[level]); }
#define NVPRO_PYRAMID_LEVEL_SIZE levelSize

vec2 reduce4(vec2 v00, vec2 v01, vec2 v10, vec2 v11) {
    vec2 reduced;
    reduced.x = min(min(v00.x, v01.x), min(v10.x, v11.x));
    reduced.y = max(max(v00.y, v01.y), max(v10.y, v11.y));
    
    return reduced;
}
#define NVPRO_PYRAMID_REDUCE4(v00, v01, v10, v11, out_) \
    out_ = reduce4(v00, v01, v10, v11)

void loadReduce4(in ivec2 coord, in int level, out vec2 out_) {
    vec2 normalized_coord = (vec2(coord) + vec2(1)) / levelSize(level);
    out_.x = textureLod(sampler2D(u_min_image, u_min_sampler), normalized_coord, level).r;
    out_.y = textureLod(sampler2D(u_max_image, u_max_sampler), normalized_coord, level).r;
}
#define NVPRO_PYRAMID_LOAD_REDUCE4 loadReduce4

#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_KHR_shader_subgroup_shuffle: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable

#define NVPRO_PYRAMID_IS_FAST_PIPELINE 1
#include "../../../nvpro/nvpro_pyramid.glsl"

void main() {
    nvproPyramidMain();
}