#version 460

#include "common.glsl"

layout(local_size_x = BIN_DISPATCH_SIZE) in;

layout(set = 1, binding = 0) buffer clusters {
    Cluster clusters[];
} u_clusters;

layout(set = 1, binding = 1) readonly buffer active_clusters {
    uint16_t indices[];
} u_active_clusters;

layout(set = 1, binding = 2) uniform clusters_count {
    uint count;
} u_count;

layout(scalar, set = 1, binding = 3) readonly buffer point_light {
    PointLight lights[];
} u_point_lights;

layout(scalar, set = 1, binding = 4) uniform lights_info {
    LightsInfo info;
} u_lights_info;

layout(push_constant) uniform push_constants {
    mat4 u_view_matrix;
};

const uint LIGHT_BATCH_SIZE = BIN_DISPATCH_SIZE;
shared vec3 s_point_lights_position[LIGHT_BATCH_SIZE];
shared float s_point_lights_radius[LIGHT_BATCH_SIZE];

bool is_in_cluster(uint light_index, uint cluster_index) {
    const float radius = s_point_lights_radius[light_index];
    vec3 position = s_point_lights_position[light_index];
    position = vec3(u_view_matrix * vec4(position, 1.0f));
    const float distance2 = distance_aabb_squared(position,
        u_clusters.clusters[cluster_index].min,
        u_clusters.clusters[cluster_index].max);

    return distance2  <= radius * radius;
}

void main() {
    const uint id = gl_GlobalInvocationID.x;
    const uint cluster_index = uint(u_active_clusters.indices[id]);

    // load lights into shared memory in batches
    const uint batch_count = (
        min(VIEW_MAX_LIGHTS,
            u_lights_info.info.point_light_count) + LIGHT_BATCH_SIZE - 1) / LIGHT_BATCH_SIZE;
    for (uint batch = 0; batch < batch_count; batch++) {
        const uint light_offset = batch * LIGHT_BATCH_SIZE;
        const uint light_fetch_index = gl_LocalInvocationID.x + light_offset;
        if (light_fetch_index < u_lights_info.info.point_light_count) {
            s_point_lights_position[gl_LocalInvocationID.x] = u_point_lights.lights[light_fetch_index].position;
            s_point_lights_radius[gl_LocalInvocationID.x] = u_point_lights.lights[light_fetch_index].radius;
        }
        barrier();
        
        if (id < u_count.count) {
            // go through each light, determine the cluster it belongs to
            uint light_count = min(LIGHT_BATCH_SIZE, u_lights_info.info.point_light_count - light_offset);
            for (uint light_index = light_offset; light_index < light_offset + light_count; light_index++) {
                // test light sphere againts cluster aabb volume
                const bool in_cluster = is_in_cluster(light_index - light_offset, cluster_index);
                if (in_cluster) {
                    const uint bin_index = light_index / BIN_BIT_SIZE;
                    const uint bin_index_min = light_index % BIN_BIT_SIZE;
                    u_clusters.clusters[cluster_index].bins[bin_index] |= 1 << bin_index_min;
                }
            }
        }        
        
        barrier();
    }
}