#version 460

#include "common.glsl"

#extension GL_EXT_samplerless_texture_functions: require
#extension GL_KHR_shader_subgroup_ballot: enable
#extension GL_EXT_scalar_block_layout: require
#extension GL_EXT_shader_explicit_arithmetic_types_int8: require 

layout(local_size_x = 8, local_size_y = 8) in;

layout(constant_id = 0) const bool IDENTIFY = false;
layout(constant_id = 1) const bool COMPACT = false;
layout(constant_id = 2) const bool CREATE_DISPATCH = false;

@immutable_sampler
layout(set = 0, binding = 0) uniform sampler u_sampler;
layout(set = 1, binding = 0) uniform texture2D u_depth;

layout(set = 1, binding = 1) readonly buffer clusters {
    Cluster clusters[];
} u_clusters;

layout(set = 1, binding = 2) writeonly buffer active_clusters {
    uint16_t indices[];
} u_active_clusters;

layout(set = 1, binding = 3) buffer cluster_visibility {
    uint8_t visibility[];  
} u_cluster_visibility;

layout(set = 1, binding = 4) buffer active_clusters_count {
    uint count;
} u_count;

layout(set = 1, binding = 5) writeonly buffer indirect_dispatch {
    VkDispatchIndirectCommand command;
} u_indirect_dispatch;

layout(push_constant) uniform push_constants {
    float u_near;
    float u_far;
};

void identify_active_clusters() {
    const uvec2 coord = gl_GlobalInvocationID.xy;
    const vec2 uv = (vec2(coord) + vec2(0.5f, 0.5f)) / textureSize(u_depth, 0);
    const float depth = textureLod(sampler2D(u_depth, u_sampler), uv, 0).r;
    if (depth == 0) 
        return;
    
    const uint slice = slice_index(depth, u_near, u_far, LIGHT_CLUSTER_BINS_Z);

    const uint cluster_index = get_cluster_index(uv, slice);
    u_cluster_visibility.visibility[cluster_index] = uint8_t(1);
}

void compact_active_clusters() {
    const uint x = gl_GlobalInvocationID.x;
    const uint y = gl_GlobalInvocationID.y % LIGHT_CLUSTER_BINS_Y;
    const uint z = gl_GlobalInvocationID.y / LIGHT_CLUSTER_BINS_Y;
    
    const uint cluster_index = x +
        y * LIGHT_CLUSTER_BINS_X +
        z * LIGHT_CLUSTER_BINS_X * LIGHT_CLUSTER_BINS_Y;
    if (cluster_index >= LIGHT_CLUSTER_BINS_X * LIGHT_CLUSTER_BINS_Y * LIGHT_CLUSTER_BINS_Z)
        return;

    const bool is_active = u_cluster_visibility.visibility[cluster_index] == uint8_t(1);

    const uvec4 is_active_ballot = subgroupBallot(is_active);
    const uint total_active_count = subgroupBallotBitCount(is_active_ballot);

    uint compacted_buffer_index_base;
    if (subgroupElect())
        compacted_buffer_index_base = atomicAdd(u_count.count, total_active_count);
    compacted_buffer_index_base = subgroupBroadcastFirst(compacted_buffer_index_base);
    const uint compacted_buffer_offset = subgroupBallotExclusiveBitCount(is_active_ballot);
    const uint compacted_buffer_index = compacted_buffer_index_base + compacted_buffer_offset;

    if (is_active) 
        u_active_clusters.indices[compacted_buffer_index] = uint16_t(cluster_index);
}

void create_dispatch() {
    uint invocation = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_WorkGroupSize.x;
    if (invocation > 0) 
        return;
    
    VkDispatchIndirectCommand command;
    command.x = (u_count.count + BIN_DISPATCH_SIZE - 1) / BIN_DISPATCH_SIZE;
    command.y = command.z = 1;
    u_indirect_dispatch.command = command;
}

void main() {
    if (IDENTIFY)
        identify_active_clusters();
    else if (COMPACT)
        compact_active_clusters();
    else if (CREATE_DISPATCH) 
        create_dispatch();
}