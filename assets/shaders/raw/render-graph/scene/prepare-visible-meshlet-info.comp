#version 460

#include "common.glsl"

layout(local_size_x = 64) in;

layout(std430, set = 1, binding = 0) readonly buffer render_object_buckets {
    uint64_t buckets[];
} u_render_object_buckets;

layout(std430, set = 1, binding = 1) readonly buffer render_object_meshlet_spans {
    MeshletSpan spans[];
} u_render_object_meshlet_spans;

layout(scalar, set = 1, binding = 2) writeonly buffer meshlet_infos {
    MeshletBucketInfo infos[];
} u_meshlet_infos;

layout(std430, set = 1, binding = 3) buffer meshlet_info_count {
    uint count;
} u_meshlet_info_count;

layout(push_constant) uniform push_constants {
    uint u_handle_count;
};

void main() {
    const uint id = gl_GlobalInvocationID.x;
    if (id >= u_handle_count)
        return;
    
    const MeshletSpan span = u_render_object_meshlet_spans.spans[id];
    const uint first_meshlet_output_index = atomicAdd(u_meshlet_info_count.count, span.count);
    for (uint i = 0; i < span.count; i++) {
        MeshletBucketInfo info;
        info.index = span.first + i;
        info.buckets = u_render_object_buckets.buckets[id];
        u_meshlet_infos.infos[first_meshlet_output_index + i] = info;
    }
}