#version 460

#include "common.glsl"
#include "culling_functions.glsl"

#extension GL_KHR_shader_subgroup_ballot: require
#extension GL_EXT_scalar_block_layout: require

layout(local_size_x = 64) in;

layout(constant_id = 0) const bool REOCCLUSION = false;
layout(constant_id = 1) const bool SINGLE_PASS = false;

layout(set = 0, binding = 0) uniform sampler u_sampler;
layout(set = 1, binding = 0) uniform texture2D u_hiz[MAX_VIEWS];

layout(scalar, set = 1, binding = 1) uniform view_buffer {
    ViewInfo view;
} u_views[MAX_VIEWS];

layout(std430, set = 1, binding = 2) readonly buffer reference_command_buffer {
    IndirectCommand commands[];
} u_reference_commands;

layout(scalar, set = 1, binding = 3) readonly buffer object_buffer {
    RenderObject objects[];
} u_objects;

layout(std430, set = 1, binding = 4) readonly buffer render_object_buckets {
    uint64_t buckets[];
} u_render_object_buckets;

layout(std430, set = 1, binding = 5) readonly buffer meshlet_buffer {
    Meshlet meshlets[];
} u_meshlets;

layout(std430, set = 1, binding = 6) readonly buffer meshlet_handles {
    uint handles[];
} u_meshlet_handles;

layout(std430, set = 1, binding = 7) readonly buffer object_visibility_buffer {
    VisibilityBucketBits buckets[];
} u_object_visibility[MAX_VIEWS];

layout(scalar, set = 1, binding = 8) writeonly buffer meshlet_infos {
    MeshletBucketInfo infos[];
} u_meshlet_infos[MAX_VIEWS];

layout(std430, set = 1, binding = 9) buffer meshlet_info_count {
    uint count;
} u_meshlet_info_count[MAX_VIEWS];

layout(std430, set = 1, binding = 10) buffer meshlet_visibility_buffer {
    VisibilityBucketBits buckets[];
} u_meshlet_visibility[MAX_VIEWS];

layout(push_constant) uniform push_constants {
    uint u_handle_count;
    uint u_view_count;
};

bool is_visible(vec3 origin, float radius, uint view_index) {
    bool visible = true;
    if (is_orthographic(u_views[view_index].view))
        visible = visible &&
            is_frustum_visible_orthographic(origin, radius, u_views[view_index].view);
    else
        visible = visible &&
            is_frustum_visible(origin, radius, u_views[view_index].view);

    return visible;
}

bool is_reocclusion_visible(vec3 origin, float radius, uint view_index) {
    bool visible = true;
    if (is_orthographic(u_views[view_index].view))
        visible = visible &&
            is_frustum_visible_orthographic(origin, radius, u_views[view_index].view) &&
            is_occlusion_visible_orthographic(origin, radius, u_views[view_index].view, u_sampler, u_hiz[view_index]);
    else
        visible = visible &&
            is_frustum_visible(origin, radius, u_views[view_index].view) &&
            is_occlusion_visible(origin, radius, u_views[view_index].view, u_sampler, u_hiz[view_index]);

    return visible;
}

void compact(uint meshlet_id, uint64_t buckets, bool visible, uint view_index) {
    const uvec4 is_visible_ballot = subgroupBallot(visible);
    const uint total_visible_count = subgroupBallotBitCount(is_visible_ballot);

    uint compacted_buffer_index_base;
    if (subgroupElect())
        compacted_buffer_index_base = atomicAdd(u_meshlet_info_count[view_index].count, total_visible_count);
    compacted_buffer_index_base = subgroupBroadcastFirst(compacted_buffer_index_base);

    const uint compacted_buffer_offset = subgroupBallotExclusiveBitCount(is_visible_ballot);
    const uint compacted_buffer_index = compacted_buffer_index_base + compacted_buffer_offset;

    if (visible) {
        MeshletBucketInfo info;
        info.index = meshlet_id;
        info.buckets = buckets;
        u_meshlet_infos[view_index].infos[compacted_buffer_index] = info;
    }
}

void main() {
    const uint id = gl_GlobalInvocationID.x;
    if (id >= u_handle_count)
        return;

    const uint meshlet_id = u_meshlet_handles.handles[id];
    const uint render_object_id = u_reference_commands.commands[meshlet_id].render_object;
    const Meshlet meshlet = u_meshlets.meshlets[meshlet_id];
    const mat4 object_model = u_objects.objects[render_object_id].model;

    const VisibilityBucketIndex render_object_bucket_index = get_bucket_index(render_object_id);
    const VisibilityBucketIndex meshlet_bucket_index = get_bucket_index(meshlet_id);

    const vec4 origin_world = object_model * vec4(
        meshlet.x,
        meshlet.y,
        meshlet.z, 1.0f);
    const float scale = extract_scale(object_model);
    const float radius = meshlet.r * scale;

    for (uint i = 0; i < u_view_count; i++) {
        const ViewInfo view = u_views[i].view;

        vec3 origin_view = vec3(view.view * origin_world);
        if (is_depth_clamped(view))
            origin_view.z = min(origin_view.z, -view.frustum_near);

        const bool is_render_object_visible = flags_visible(
            u_object_visibility[i].buckets[render_object_bucket_index.bucket],
            render_object_bucket_index.bit_high,
            render_object_bucket_index.bit_low);
        const bool is_last_frame_visible = flags_visible(
            u_meshlet_visibility[i].buckets[meshlet_bucket_index.bucket],
            meshlet_bucket_index.bit_high,
            meshlet_bucket_index.bit_low);

        bool visible = false;

        if (SINGLE_PASS) {
            // this is for order-independent translucency rendering
            visible = is_render_object_visible && is_reocclusion_visible(origin_view, radius, i);
        }
        else if (!REOCCLUSION) {
            visible = is_render_object_visible && is_last_frame_visible && is_visible(origin_view, radius, i);
        }
        else {
            visible = is_render_object_visible && is_reocclusion_visible(origin_view, radius, i);

            const uvec4 visible_ballot = subgroupBallot(visible);
            if (gl_SubgroupSize == 64) {
                u_meshlet_visibility[i].buckets[meshlet_bucket_index.bucket].visibility[0] = visible_ballot.r;
                u_meshlet_visibility[i].buckets[meshlet_bucket_index.bucket].visibility[1] = visible_ballot.g;
            } else {
                u_meshlet_visibility[i].buckets[meshlet_bucket_index.bucket].visibility[gl_SubgroupID] = visible_ballot.r;
            }
            
            visible = visible && !is_last_frame_visible;
        }
        
        compact(meshlet_id, u_render_object_buckets.buckets[render_object_id], visible, i);
    }
}