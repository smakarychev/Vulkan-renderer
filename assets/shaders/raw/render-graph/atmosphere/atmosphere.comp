// based on "A Scalable and Production Ready Sky and Atmosphere Rendering Technique by SÃ©bastien Hillaire (Epic Games, Inc)"
// https://github.com/sebh/UnrealEngineSkyAtmosphere

#version 460

#include "common.glsl"
#include "../tonemapping.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

@immutable_sampler_clamp_edge
layout(set = 0, binding = 0) uniform sampler u_sampler;
layout(set = 1, binding = 0) uniform texture2D u_sky_view_lut;
layout(set = 1, binding = 1, rgba16f) uniform writeonly image2D u_atmosphere;

layout(scalar, set = 1, binding = 2) uniform atmosphere_settings {
    AtmosphereSettings settings;
} u_atmosphere_settings;

layout(scalar, set = 1, binding = 3) uniform directional_light {
    DirectionalLight light;
} u_directional_light;

layout(set = 1, binding = 4) uniform camera_buffer {
    CameraGPU camera;
} u_camera;

layout(push_constant) uniform push_constants {
    vec2 u_render_size;
};

void main() {
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    if (coord.x >= u_render_size.x || coord.y >= u_render_size.y)
        return;
    
    const vec2 uv = vec2(coord) / u_render_size;
    const vec3 clip = vec3(vec2(uv.x, uv.y) * 2.0f - 1.0f, -1.0f);
    vec4 unprojected = u_camera.camera.inv_projection * vec4(clip, 1.0f);
    unprojected.xyz /= unprojected.w;
    const vec3 rd = normalize(u_camera.camera.inv_view * vec4(unprojected.xyz, 0.0f)).xyz * vec3(1, -1, 1);
    
    const AtmosphereSettings atm = u_atmosphere_settings.settings;

    const vec3 pos = u_camera.camera.position * 1e-6f + vec3(0.0f, atm.surface, 0.0f);
    const vec3 sun_dir = u_directional_light.light.direction;
    
    vec3 L = vec3(0.0f);
    const float r = length(pos);
    if (r < atm.atmosphere) {
        const vec3 up = pos / r;
        const float mu = dot(rd, up);
        
        const vec3 right = normalize(cross(up, rd));
        const vec3 forward = normalize(cross(right, up));
        const float light_view_cos = normalize(vec2(dot(sun_dir, forward), dot(sun_dir, right))).x;
        
        const bool intersects_surface = intersect_sphere(pos, rd, vec3(0.0f), atm.surface).t != NO_HIT;
        
        const vec2 sky_view_uv = sky_view_uv_from_zen_view_cos(atm, intersects_surface, mu, light_view_cos, r);

        L = textureLod(sampler2D(u_sky_view_lut, u_sampler), sky_view_uv, 0).rgb * 40;
    }

    imageStore(u_atmosphere, coord, vec4(tonemap(L, 2.0f), 1.0f));
}