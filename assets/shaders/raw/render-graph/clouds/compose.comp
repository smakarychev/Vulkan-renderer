#version 460

#include "../../utility.glsl"
#include "../../view_info.glsl"

#extension GL_EXT_samplerless_texture_functions: require

layout(local_size_x = 8, local_size_y = 8) in;

@immutable_sampler_clamp_border
layout(set = 0, binding = 0) uniform sampler u_sampler;
layout(set = 1, binding = 0) uniform texture2D u_scene_color;
layout(set = 1, binding = 1) uniform texture2D u_scene_depth;
layout(set = 1, binding = 2) uniform texture2D u_clouds;
layout(set = 1, binding = 3) uniform texture2D u_clouds_depth;

layout(set = 1, binding = 4, rgba16f) uniform image2D u_clouds_composed;

layout(scalar, set = 1, binding = 5) uniform view_info {
    ViewInfo view;
} u_view_info;

void main() {
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    const vec2 image_size_inverse = 1.0f / textureSize(u_scene_color, 0);
    const vec2 uv = vec2(coord + 0.5f) * image_size_inverse;
    
    const float scene_depth = -linearize_reverse_z(textureLod(sampler2D(u_scene_depth, u_sampler), uv, 0).r, 
        u_view_info.view.near, u_view_info.view.far);
    const float clouds_depth = textureLod(sampler2D(u_clouds_depth, u_sampler), uv, 0).r;
    
    const vec3 scene_color = textureLod(sampler2D(u_scene_color, u_sampler), uv, 0).rgb;
    
    if (clouds_depth > scene_depth) {
        imageStore(u_clouds_composed, coord, vec4(scene_color, 1.0f));
    } else {
        const vec4 cloud_color = textureLod(sampler2D(u_clouds, u_sampler), uv, 0);
        imageStore(u_clouds_composed, coord, vec4(scene_color * cloud_color.a + cloud_color.rgb, 1.0));
    }
    
}