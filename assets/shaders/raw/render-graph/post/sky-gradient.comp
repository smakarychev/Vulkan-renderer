#version 460

layout(local_size_x = 32, local_size_y = 32) in;

struct Camera {
    mat4 view_inverse;
    vec3 position;
};

struct Settings {
    vec4 sky_color_horizon;
    vec4 sky_color_zenith;
    vec4 ground_color;
    vec4 sun_direction;
    float sun_radius;
    float sun_intensity;
    float ground_to_sky_width;
    float horizon_to_zenith_width;
    float ground_to_sky_rate;
    float horizon_to_zenith_rate;
};

layout(set = 1, binding = 0) uniform camera {
    Camera camera;
} u_camera;
layout(set = 1, binding = 1) uniform settings {
    Settings settings;
} u_settings;
layout(set = 1, binding = 2, rgba16f) uniform writeonly image2D u_out_image;

layout(push_constant) uniform push_constants {
    uvec2 image_size;
};

void main() {
    uvec2 pos = gl_GlobalInvocationID.xy;
    
    if (image_size.x <= pos.x || image_size.y <= pos.y)
        return;

    Settings settings = u_settings.settings;
    
    vec2 uv = vec2(pos) / image_size.y;
    uv.y = 1.0f - uv.y;
    uv = uv - 0.5f;
    vec3 view_local = vec3(uv, -1.0f);
    vec3 view = vec3(u_camera.camera.view_inverse * vec4(view_local, 1.0f));
    vec3 dir = normalize(view - u_camera.camera.position);
    
    float sky_t = pow(
        smoothstep(0.0f, settings.horizon_to_zenith_width, dir.y), 1.0f / settings.horizon_to_zenith_rate); 
    float ground_t = pow(
        smoothstep(-settings.ground_to_sky_width, 0.0f, dir.y), 1.0f / settings.ground_to_sky_rate);

    vec3 sky_gradient = mix(settings.sky_color_horizon.rgb, settings.sky_color_zenith.rgb, sky_t);
    float sun = pow(clamp(dot(dir, -normalize(settings.sun_direction).xyz), 0.0f, 1.0f), settings.sun_radius) *
        settings.sun_intensity;
    vec3 color = mix(settings.ground_color.rgb, sky_gradient, ground_t) + sun * float(ground_t >= 1.0f);
    
    
    imageStore(u_out_image, ivec2(pos), vec4(color, 1.0f));
}