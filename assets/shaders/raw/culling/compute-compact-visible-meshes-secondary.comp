#version 460

#extension GL_KHR_shader_subgroup_ballot: enable

layout(local_size_x = 64) in;

struct IndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;

    uint render_object;
};

struct object_visibility_data {
    uint flags;
};

layout(std430, set = 0, binding = 0) buffer readonly command_buffer {
    IndirectCommand commands[];
} u_command_buffer;

layout(std430, set = 0, binding = 1) buffer writeonly compacted_command_buffer {
    IndirectCommand commands[];
} u_compacted_command_buffer;

@dynamic
layout(std430, set = 0, binding = 2) buffer count_buffer {
    uint count;
} u_count_buffer;

layout(std430, set = 0, binding = 3) readonly buffer object_visibility_buffer{
    object_visibility_data visibility[];
} u_object_visibility_buffer;

layout(push_constant) uniform push_constants {
    uint meshlets_count;
    uint u_command_buffer_max_index;
};

void write_compacted_visible(uint id) {
    IndirectCommand command = u_command_buffer.commands[id];
    object_visibility_data visibility = u_object_visibility_buffer.visibility[command.render_object];

    bool is_visible = (visibility.flags & 1u) == 1;
    uvec4 is_visible_ballot = subgroupBallot(is_visible);

    // find subgroup total visible meshes count
    uint total_visible_count = subgroupBallotBitCount(is_visible_ballot);

    uint compacted_buffer_index_base;
    if (subgroupElect())
        compacted_buffer_index_base = atomicAdd(u_count_buffer.count, total_visible_count);
    compacted_buffer_index_base = subgroupBroadcastFirst(compacted_buffer_index_base);

    uint compacted_buffer_offset = subgroupBallotExclusiveBitCount(is_visible_ballot);

    uint compacted_buffer_index = compacted_buffer_index_base + compacted_buffer_offset;

    if (is_visible)
        u_compacted_command_buffer.commands[u_command_buffer_max_index - compacted_buffer_index] = u_command_buffer.commands[id];
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= meshlets_count)
        return;
    
    write_compacted_visible(id);
}