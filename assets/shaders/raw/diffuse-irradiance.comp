#version 460

#include "globals.glsl"

layout(local_size_x = 32, local_size_y = 32) in;

@immutable_sampler
layout(set = 0, binding = 0) uniform sampler u_sampler;
layout(set = 1, binding = 0) uniform textureCube u_env;
layout(set = 1, binding = 1, rgba16f) uniform writeonly imageCube u_irradiance;

layout(push_constant) uniform push_constants {
    vec2 u_irradiance_size_inv;
};

vec4 compute_irradiance(vec3 normal) {
    const uint n = 128 * 1024;
    vec3 irradiance = vec3(0.0f);
    for (uint i = 0; i < n; i++) {
        const vec2 hammersley = hammersley2d(i, n);
        const vec3 sample_dir = sample_hemisphere(hammersley, normal);
        
        const float cos_theta = clamp(dot(sample_dir, normal), 0.0f, 1.0f);
        
        irradiance += textureLod(samplerCube(u_env, u_sampler), sample_dir, 0).rgb * cos_theta;
    }
    irradiance = 2.0 * irradiance / vec3(n);
    
    return vec4(irradiance, 1.0f);
}

void main() {
    const vec3 normal = cubemap_normal_vector(gl_GlobalInvocationID, u_irradiance_size_inv);
    const vec4 color = compute_irradiance(normal);

    const ivec3 coord = ivec3(gl_GlobalInvocationID);
    imageStore(u_irradiance, coord, color);
}