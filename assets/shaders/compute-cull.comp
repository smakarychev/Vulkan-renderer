#version 460

layout(local_size_x = 64) in;

struct VkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

@dynamic
layout(set = 0, binding = 0) uniform scene_data {
    mat4 view_matrix; // 4
    float frustum_top_y;
    float frustum_top_z;
    float frustum_right_x;
    float frustum_right_z; // 4
    float frustum_near;
    float frustum_far;
    float projection_width;
    float projection_height; // 4
    float depth_pyramid_width;
    float depth_pyramid_height;
    uint mesh_count;
    uint pad0; // 4
} u_scene_data;

layout(set = 0, binding = 1) uniform sampler2D u_depth_pyramid;

struct object_data{
    mat4 model;
    // bounding sphere
    float x; 
    float y;
    float z;
    float r;
};

layout(std430, set = 0, binding = 2) buffer readonly object_buffer {
    object_data objects[];
} u_object_buffer;

layout(std430, set = 0, binding = 3) buffer writeonly command_buffer {
    VkDrawIndexedIndirectCommand commands[];
} u_command_buffer;

float extract_scale(mat4 matrix)
{
    vec3 scales = vec3(dot(matrix[0], matrix[0]), dot(matrix[1], matrix[1]), dot(matrix[2], matrix[2]));
    return max(scales.x, max(scales.y, scales.z));
}

bool is_visible(uint id)
{
    object_data object = u_object_buffer.objects[id];
    
    vec3 origin = vec3(u_scene_data.view_matrix * object.model * vec4(object.x, object.y, object.z, 1.0f));
    float radius = object.r * extract_scale(object.model);
    
    bool visible = true;
    visible = visible && abs(u_scene_data.frustum_right_x * origin.x) < -origin.z * u_scene_data.frustum_right_z + radius;
    visible = visible && abs(u_scene_data.frustum_top_y * origin.y) < -origin.z * u_scene_data.frustum_top_z + radius;
    visible = visible && origin.z - radius < -u_scene_data.frustum_near && origin.z + radius > -u_scene_data.frustum_far;

    if (visible && origin.z + radius < -u_scene_data.frustum_near)
    {
        vec4 aabb;
        vec3 cr = origin * radius;
        float czr2 = origin.z * origin.z - radius * radius;

        float vx = sqrt(origin.x * origin.x + czr2);
        float minx = (vx * origin.x - cr.z) / (vx * origin.z + cr.x);
        float maxx = (vx * origin.x + cr.z) / (vx * origin.z - cr.x);

        float vy = sqrt(origin.y * origin.y + czr2);
        float miny = (vy * origin.y - cr.z) / (vy * origin.z + cr.y);
        float maxy = (vy * origin.y + cr.z) / (vy * origin.z - cr.y);
        aabb = vec4(minx * u_scene_data.projection_width, miny * u_scene_data.projection_height, maxx * u_scene_data.projection_width, maxy * u_scene_data.projection_height);
        // clip space -> uv space
        aabb = aabb.xwzy * vec4(-0.5f, 0.5f, -0.5f, 0.5f) + vec4(0.5f);
        
        float width =  (aabb.x - aabb.z) * u_scene_data.depth_pyramid_width;
        float height = (aabb.y - aabb.w) * u_scene_data.depth_pyramid_height;

        float level = floor(log2(max(width, height)));
        
        float depth = textureLod(u_depth_pyramid, (aabb.xy + aabb.zw) * 0.5, level).r;
        
        float coeff = 1.0f / (u_scene_data.frustum_far - u_scene_data.frustum_near);
        float projected_depth = coeff *
            (-u_scene_data.frustum_far * u_scene_data.frustum_near / (origin.z + radius) -
              u_scene_data.frustum_near);
        
        visible = projected_depth >= depth;
    }

    return visible;
}

void main()
{
    uint id = gl_GlobalInvocationID.x;
    if (id >= u_scene_data.mesh_count)
        return;
    
    bool visible = is_visible(id);
    u_command_buffer.commands[id].instanceCount = int(visible);
}