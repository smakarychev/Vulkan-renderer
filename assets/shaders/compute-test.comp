#version 460

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform parameter_ubo {
    float deltaTime;
} dyn_u_ubo;

layout(std140, binding = 1) readonly buffer particle_ssbo_in {
    Particle particles[];
} u_particles_in;

layout(std140, binding = 2) buffer particle_ssbo_out {
    Particle particles[];
} u_particles_out;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particle_in = u_particles_in.particles[index];

    u_particles_out.particles[index].position = particle_in.position + particle_in.velocity.xy * dyn_u_ubo.deltaTime;
    u_particles_out.particles[index].velocity = particle_in.velocity;

    // Flip movement at window border
    if ((u_particles_out.particles[index].position.x <= -1.0) || (u_particles_out.particles[index].position.x >= 1.0)) {
        u_particles_out.particles[index].velocity.x = -u_particles_out.particles[index].velocity.x;
    }
    if ((u_particles_out.particles[index].position.y <= -1.0) || (u_particles_out.particles[index].position.y >= 1.0)) {
        u_particles_out.particles[index].velocity.y = -u_particles_out.particles[index].velocity.y;
    }

}